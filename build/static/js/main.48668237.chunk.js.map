{"version":3,"sources":["logo.svg","components/CurrentBalance/index.js","components/Transaction/index.js","components/TransactionHistory/index.js","components/TransactionInput/index.js","components/ActionButton/index.js","view/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CurrentBalance","className","Transaction","TrasactionHistory","TransactionInput","useState","description","Amount","userInput","setUserInput","addTrans","e","target","name","value","preValue","console","log","placeholder","required","onChange","type","ActionButton","style","textAlign","marginTop","onClick","TrackerView","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8KAAAA,EAAOC,QAAU,IAA0B,kC,oLCUxBC,G,wBARM,WACnB,OAAM,yBAAKC,UAAU,kBAClB,0BAAMA,UAAU,aAAhB,sBACC,uBAAGA,UAAU,iBAAb,eCKKC,G,MARE,WACb,OAAO,yBAAKD,UAAU,kBACnB,yBAAKA,UAAU,WAAf,WAAiC,uBAAGA,UAAU,SAAb,aAEjC,yBAAKA,UAAU,WAAf,WAAiC,uBAAGA,UAAU,OAAb,gBC4BzBE,G,MAhCS,WAEtB,OACE,yBAAKF,UAAU,kBACb,yBAAKA,UAAU,YACb,4CACA,2CAEA,0BAAMA,UAAU,iBAAhB,MAEF,yBAAKA,UAAU,YACb,4CACA,2CAEA,0BAAMA,UAAU,iBAAhB,MAEF,yBAAKA,UAAU,YACb,4CACA,2CAEA,0BAAMA,UAAU,iBAAhB,MAEF,yBAAKA,UAAU,YACb,4CACA,2CAEA,0BAAMA,UAAU,iBAAhB,S,qBCqBOG,G,MA9CQ,WAAO,IAAD,EACOC,mBAAS,CACzCC,YAAa,GACbC,OAAQ,KAHiB,mBACpBC,EADoB,KACTC,EADS,KAMrBC,EAAW,SAACC,GAAO,IAAD,EACHA,EAAEC,OAAdC,EADe,EACfA,KAAKC,EADU,EACVA,MACZL,GAAa,SAACM,GACV,OAAO,2BACAA,GADP,kBAEKF,EAAMC,OAGfE,QAAQC,IAAIT,IAEd,OACE,oCACE,6BACE,uBAAGP,UAAU,oBAAb,eACA,2BACEA,UAAU,cACViB,YAAY,wBACZL,KAAK,cACLM,UAAQ,EACRC,SAAU,SAACT,GACTD,EAASC,OAIf,6BACE,uBAAGV,UAAU,oBAAb,sBACA,2BACEoB,KAAK,SACLpB,UAAU,cACViB,YAAY,8BACZL,KAAK,SACLM,UAAQ,EACRC,SAAU,SAACT,GACTD,EAASC,UC3BNW,G,MAbI,WAIjB,OACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,UAAW,SAC5C,4BAAQxB,UAAU,iBAAiByB,QAL3B,WACVV,QAAQC,IAAI,kBAKP,IADH,kBAEkB,QCeTU,EAlBG,WAChB,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACE,uBAAGA,UAAU,mBAAb,WACA,wBAAIA,UAAU,OACd,kBAAC,EAAD,MACA,uBAAGA,UAAU,mBAAb,uBACA,wBAAIA,UAAU,OAChB,yBAAKA,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCJO2B,MAVf,WACE,OACE,yBAAK3B,UAAU,cACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAaA,UAAU,WCGX4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.48668237.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","    import React from \"react\";\r\n    import './currentBalance.css'\r\n    let CurrentBalance = () => {\r\n      return<div className=\"currrntBalance\">\r\n         <span className=\" Cbalance\"> Current Balance :</span>\r\n          <p className='balance green'>\r\n         1000 PKR\r\n          </p>\r\n      </div>;\r\n    };\r\n    export default CurrentBalance;\r\n","import React from 'react'\r\nimport './transaction.css'\r\nlet Transaction =() =>{\r\n    return <div className=\"transactionBox\">\r\n       <div className=\"content\">Income  <p className=\"green\">\r\n           1000 PKR</p></div>\r\n       <div className=\"content\">Expense <p className=\"red\">\r\n           1000 PKR</p></div>\r\n    </div>\r\n}\r\nexport default Transaction;","import React, { useState } from \"react\";\r\nimport \"./transactionHistory.css\";\r\nlet TrasactionHistory = () => {\r\n  //   const [isShown, setIsShown] = useState(false);\r\n  return (\r\n    <div className=\"historyWrapper\">\r\n      <div className=\"history1\">\r\n        <p>Ali Khan Saab</p>\r\n        <p> 100000 PKR </p>\r\n\r\n        <span className=\"deleteBtn red\">X</span>\r\n      </div>\r\n      <div className=\"history1\">\r\n        <p>Ali Khan Saab</p>\r\n        <p> 100000 PKR </p>\r\n\r\n        <span className=\"deleteBtn red\">X</span>\r\n      </div>\r\n      <div className=\"history1\">\r\n        <p>Ali Khan Saab</p>\r\n        <p> 100000 PKR </p>\r\n\r\n        <span className=\"deleteBtn red\">X</span>\r\n      </div>\r\n      <div className=\"history1\">\r\n        <p>Ali Khan Saab</p>\r\n        <p> 100000 PKR </p>\r\n\r\n        <span className=\"deleteBtn red\">X</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrasactionHistory;\r\n","import React, { useState } from \"react\";\r\nimport \"./input.css\";\r\n\r\nlet TransactionInput = () => {\r\n  const [userInput, setUserInput] = useState({\r\n    description: \"\",\r\n    Amount: \"\",\r\n  });\r\n\r\n  const addTrans = (e) => {\r\n    const {name,value}=e.target\r\n    setUserInput((preValue)=>{\r\n        return {\r\n            ...preValue,\r\n            [name]:value\r\n        }\r\n    })\r\n    console.log(userInput)\r\n};\r\n  return (\r\n    <>\r\n      <div>\r\n        <p className=\"secName_HistoryI\">Description</p>\r\n        <input\r\n          className=\"inputFields\"\r\n          placeholder=\"Detail of Transaction\"\r\n          name=\"description\"\r\n          required\r\n          onChange={(e) => {\r\n            addTrans(e);\r\n          }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <p className=\"secName_HistoryI\">Transaction Amount</p>\r\n        <input\r\n          type=\"number\"\r\n          className=\"inputFields\"\r\n          placeholder=\"Dollar Value of Transaction\"\r\n          name=\"Amount\"\r\n          required\r\n          onChange={(e) => {\r\n            addTrans(e);\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default TransactionInput;\r\n","import React from \"react\";\r\nimport \"./actionBtn.css\";\r\nlet ActionButton = () => {\r\n  let hello = () => {\r\n    console.log(\"action******\");\r\n  };\r\n  return (\r\n    <div style={{ textAlign: \"center\", marginTop: \"10px\" }}>\r\n      <button className=\"addTransaction\" onClick={hello}>\r\n        {\" \"}\r\n        Add Transaction{\" \"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nexport default ActionButton;\r\n","import React from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport CurrentBalance from \"../components/CurrentBalance\";\r\nimport Transaction from \"../components/Transaction\";\r\nimport TrasactionHistory from \"../components/TransactionHistory\";\r\nimport TransactionInput from \"../components/TransactionInput\";\r\nimport ActionButton from \"../components/ActionButton/\";\r\nlet TrackerView = () => {\r\n  return (\r\n    <div className=\"abc\">\r\n      <CurrentBalance />\r\n      <Transaction />\r\n        <p className=\"secName_History\">History</p>\r\n        <hr className=\"hr\" />\r\n        <TrasactionHistory />\r\n        <p className=\"secName_History\">Add New Transaction</p>\r\n        <hr className=\"hr\" />\r\n      <div className=\"ContentBody\">\r\n        <TransactionInput />\r\n        <ActionButton />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrackerView;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport TrackerView from \"./view\";\n\nfunction App() {\n  return (\n    <div className=\"App-header\">\n      <div className=\"wrapper\">\n        <TrackerView className=\"abc\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}