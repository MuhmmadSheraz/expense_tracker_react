{"version":3,"sources":["logo.svg","context/Reducer.js","context/GlobalState.js","components/CurrentBalance/index.js","components/Transaction/index.js","components/TransactionHistory/index.js","components/ActionButton/index.js","components/TransactionInput/index.js","view/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","state","action","console","log","payload","currBalance","type","transactions","transaction","balance","filter","x","id","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","Reducer","dispatch","Provider","value","deleteTransaction","Amount","addTransaction","parseFloat","CurrentBalance","useContext","className","Transaction","income","expense","map","Math","abs","TrasactionHistory","deleteHistory","length","index","key","description","onClick","ActionButton","props","style","textAlign","marginTop","click","TransactionInput","useState","userInput","setUserInput","setTrans","e","target","name","preValue","placeholder","required","onChange","swal","text","icon","dangerMode","floor","random","TrackerView","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8c5d3d93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default (state, action) => {\r\n    console.log(\"Reducer****\",action.payload.currBalance)\r\n  switch (action.type) {\r\n    case \"ADD_TRANSACTION\":\r\n      return {\r\n        ...state,\r\n        transactions: [...state.transactions, action.payload.transaction],\r\n        balance:action.payload.currBalance  \r\n    };\r\n    case \"DELETE_TRANSACTION\":\r\n        return {\r\n            ...state,\r\n            transactions: state.transactions.filter((x) => x.id !== action.payload.id),\r\n            balance:action.payload.currBalance ,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useReducer, createContext } from \"react\";\r\nimport Reducer from \"./Reducer.js\";\r\n\r\nconst initialState = {\r\n  transactions: [],\r\n  balance: 0,\r\n};\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// Provider component\r\nexport const GlobalProvider = ({ children }) => {\r\n  //Use Reducer\r\n  const [state, dispatch] = useReducer(Reducer, initialState);\r\n\r\n  function addTransaction(transaction) {\r\n    let currBalance = state.balance + parseFloat(transaction.Amount);\r\n    dispatch({\r\n      type: \"ADD_TRANSACTION\",\r\n      payload: { transaction, currBalance },\r\n    });\r\n  }\r\n  function deleteTransaction(id,Amount) {\r\n       let currBalance = state.balance - Amount;\r\n    dispatch({\r\n      type: \"DELETE_TRANSACTION\",\r\n      payload: {id,currBalance}\r\n    });\r\n  }\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        transactions: state.transactions,\r\n        balance: state.balance,\r\n        deleteTransaction,\r\n        addTransaction,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, {useContext}from \"react\";\r\nimport \"./currentBalance.css\";\r\nimport { GlobalContext } from \"../../context/GlobalState\";\r\nlet CurrentBalance = () => {\r\n  const { balance } = useContext(GlobalContext);\r\n\r\n  console.log(\"JSX*****\",balance)\r\n  return (\r\n    <div className=\"currrntBalance\">\r\n      <span className=\" Cbalance\"> Current Balance :</span>\r\n  <p className=\"balance green\">$ {balance}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default CurrentBalance;\r\n\r\n","import React, { useContext } from \"react\";\r\nimport \"./transaction.css\";\r\nimport { GlobalContext } from \"../../context/GlobalState\";\r\nlet Transaction = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n  let income = 0;\r\n  let expense = 0;\r\n  transactions.map((x) => {\r\n    x.Amount > 0 ? (income += parseFloat(x.Amount)) : (expense += parseFloat(x.Amount));\r\n  });\r\n  console.log(income, expense);\r\n  return (\r\n    <div className=\"transactionBox\">\r\n      <div className=\"content\">\r\n        Income <p className=\"green\">$ {income} </p>\r\n      </div>\r\n      <div className=\"content\">\r\n        Expense <p className=\"red\">$ {Math.abs(expense)} </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Transaction;\r\n","import React, { useState, useContext } from \"react\";\r\nimport \"./transactionHistory.css\";\r\nimport { GlobalContext } from \"../../context/GlobalState\";\r\nlet TrasactionHistory = () => {\r\n  const { transactions, deleteTransaction } = useContext(GlobalContext);\r\n  let deleteHistory = (id, Amount) => {\r\n    deleteTransaction(id, Amount);\r\n    console.log(id);\r\n  };\r\n  return (\r\n    <div className=\"historyWrapper\">\r\n      {transactions.length ?\r\n      transactions.map((x, index) => {\r\n        console.log(x.id);\r\n        return x.Amount < 0 ? (\r\n          <div key={index} className=\"historyEx\">\r\n            <p>{x.description}</p>\r\n            <p> $ {Math.abs(x.Amount)} </p>\r\n            <span\r\n              className=\"deleteBtn\"\r\n              onClick={() => deleteHistory(x.id, x.Amount)}\r\n            >\r\n              X\r\n            </span>\r\n          </div>\r\n        ) : (\r\n          <div key={index} className=\"historyIn\">\r\n            <p>{x.description}</p>\r\n            <p>$ {x.Amount} </p>\r\n            <span\r\n              className=\"deleteBtn\"\r\n              onClick={() => deleteHistory(x.id, x.Amount)}\r\n            >\r\n              X\r\n            </span>\r\n          </div>\r\n        );\r\n      })\r\n      :<p className=\"noHistory\">No History Found !</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrasactionHistory;\r\n","import React from \"react\";\r\nimport \"./actionBtn.css\";\r\nlet ActionButton = (props) => {\r\n  return (\r\n    <div style={{ textAlign: \"center\", marginTop: \"10px\" }}>\r\n      <button className=\"addTransaction\" onClick={props.click}>\r\n        Add Transaction\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nexport default ActionButton;\r\n","import React, { useState, useContext } from \"react\";\r\nimport ActionButton from \"../ActionButton\";\r\nimport \"./input.css\";\r\nimport swal from \"sweetalert\";\r\nimport { GlobalContext } from \"../../context/GlobalState\";\r\n\r\nlet TransactionInput = () => {\r\n  const { addTransaction, transactions } = useContext(GlobalContext);\r\n\r\n  const [userInput, setUserInput] = useState({\r\n    description: \"\",\r\n    Amount: \"\",\r\n  });\r\n\r\n  const setTrans = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserInput((preValue) => {\r\n      return {\r\n        ...preValue,\r\n        [name]: value,\r\n      };\r\n    });\r\n  };\r\n  let add = () => {\r\n    console.log(userInput);\r\n    if (userInput.Amount == \"\" || userInput.description == \"\") {\r\n      return swal({\r\n        text: \"Please Fill All The Fields\",\r\n        icon: \"warning\",\r\n        dangerMode: true,\r\n      });\r\n    }\r\n    let id = Math.floor(Math.random() * 1000);\r\n    addTransaction({ ...userInput, id });\r\n    setUserInput({ description: \"\", Amount: \"\" });\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <p className=\"secName_HistoryI\">Description</p>\r\n        <input\r\n          value={userInput.description}\r\n          className=\"inputFields\"\r\n          placeholder=\"Detail of Transaction\"\r\n          name=\"description\"\r\n          required\r\n          onChange={(e) => {\r\n            setTrans(e);\r\n          }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <p className=\"secName_HistoryI\">Transaction Amount</p>\r\n        <input\r\n          value={userInput.Amount}\r\n          type=\"number\"\r\n          className=\"inputFields\"\r\n          placeholder=\"Dollar Value of Transaction\"\r\n          name=\"Amount\"\r\n          required\r\n          onChange={(e) => {\r\n            setTrans(e);\r\n          }}\r\n        />\r\n      </div>\r\n      <ActionButton click={add} />\r\n    </>\r\n  );\r\n};\r\nexport default TransactionInput;\r\n","import React from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport CurrentBalance from \"../components/CurrentBalance\";\r\nimport Transaction from \"../components/Transaction\";\r\nimport TrasactionHistory from \"../components/TransactionHistory\";\r\nimport TransactionInput from \"../components/TransactionInput\";\r\n\r\nlet TrackerView = () => {\r\n  return (\r\n    <div className=\"abc\">\r\n      <CurrentBalance />\r\n      <Transaction />\r\n        <p className=\"secName_History\">History</p>\r\n        <hr className=\"hr\" />\r\n        <TrasactionHistory />\r\n        <p className=\"secName_History\">Add New Transaction</p>\r\n        <hr className=\"hr\" />\r\n      <div className=\"ContentBody\">\r\n        <TransactionInput />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrackerView;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport TrackerView from \"./view\";\nimport {GlobalProvider} from \"./context/GlobalState.js\";\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <div className=\"App-header\">\n        <div className=\"wrapper\">\n          <TrackerView className=\"abc\" />\n        </div>\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}